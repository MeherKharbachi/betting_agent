# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Utils/04_scaler.ipynb.

# %% auto 0
__all__ = ['CustomScaler']

# %% ../../nbs/Utils/04_scaler.ipynb 3
import gym
import torch
import datetime
import numpy as np
import pandas as pd
from betting_env.betting_env import Observation
from ..datastructure.team_features import *
from d3rlpy.preprocessing.scalers import Scaler
from typing import Any, Dict

# %% ../../nbs/Utils/04_scaler.ipynb 6
class CustomScaler(Scaler):
    def __init__(self):
        pass

    def fit_with_env(
        self,
        env: gym.Env,  # Gym environment.
    ):
        "Gets scaling parameters from environment."
        pass

    def transform(
        self,
        x: Observation,  # Observation.
    ) -> np.ndarray:  # Observation features, shape=(1, new_shape), new_shape is the number of features extracted from the database.
        "Returns processed observation."

        # Real-Analytics Home Team Id.
        ra_home_team_id = x.ra_teams_ids[0]

        # Real-Analytics Away Team Id.
        ra_away_team_id = x.ra_teams_ids[1]

        # Game Date.
        game_date = x.game_date

        # 1X2 and Asian Handicap odds.
        odds = x.numerical_observation[0][25:]

        # AH Line.
        ah_line = x.ah_line

        # Extract Home and Away team features
        home_team_feats = self.get_team_features(
            team_id=ra_home_team_id, date=game_date
        )
        away_team_feats = self.get_team_features(
            team_id=ra_away_team_id, date=game_date
        )
        # Concatenate all features (Home and Away teams features + 1X2 and AH odds).
        observation = np.hstack(
            (home_team_feats, away_team_feats, odds, ah_line)
        ).reshape(1, -1)

        return observation

    def reverse_transform(
        self,
        x: torch.Tensor,  # Processed observation.
    ) -> torch.Tensor:
        "Returns reversely transformed observations."
        pass

    def get_params(
        self,
        deep: bool = False,  # Flag to deeply copy objects.
    ) -> Dict[str, Any]:
        "Returns scaling parameters."
        return {}

    def get_team_features(
        self,
        team_id: str,  # Real-analytics team identifier.
        date: datetime.datetime,  # Game Date
    ) -> np.array:  # Team features.
        "Extract teams features from Database."
        feats = TeamFeatures.get_latest(ra_team_id=team_id, date=date)
        team_feats = np.array(
            [feats.elo]  # Elo .
            + [feats.glicko]  # Glicko.
            + [feats.quality_overall]  # team Overall rating.
            + [feats.quality_attack]  # Attack rating.
            + [feats.quality_midfield]  # Midfield rating.
            + [feats.quality_defence]  # Defence rating.
        )

        return team_feats
